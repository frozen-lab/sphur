name: Unit Tests

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # allow manual trigger
  workflow_dispatch:

jobs:
  clib-test:
    strategy:
      fail-fast: false
      
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            use-flake: true
            
          - os: ubuntu-24.04-arm
            arch: aarch64
            use-flake: true

          - os: windows-latest
            arch: x86_64
            use-flake: false
            
          - os: windows-11-arm
            arch: aarch64
            use-flake: false

          - os: macos-13
            arch: x86_64
            use-flake: true
            
          - os: macos-latest
            arch: aarch64
            use-flake: true
            
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4

      # MacOS x86_64 CPU check
      # 
      # NOTE: GitHub does not guaranty that we will always get x64,
      # so we must skip if underlying aarch is not x64, to know more
      # -> `https://github.com/actions/runner/issues/3339`
      - name: Validate CPU Arch for MacOS (x84_64)
        if: matrix.os == 'macos-13'
        run: |
          if [ "$(uname -m)" != "x86_64" ]; then
            echo "Skipping: Not running on Intel MacOS (x86_64)"
            exit 0
          fi

      #
      # CPU Info (Linux & MacOS w/ Nix)
      # 
      - name: Info (CPU & SIMD) (Linux/Mac)
        if: matrix.use-flake == true
        run: |
          echo "===== uname ====="
          uname -a || true
          
          echo "===== lscpu / sysctl ====="
          if command -v lscpu >/dev/null 2>&1; then
            lscpu
          elif command -v sysctl >/dev/null 2>&1; then
            sysctl -a | grep machdep.cpu
          else
            echo "No lscpu/sysctl available"
          fi

          echo "===== /proc/cpuinfo ====="
          if [ -f /proc/cpuinfo ]; then
            grep -m1 "model name" /proc/cpuinfo || true
            grep -m1 "Features" /proc/cpuinfo || true
            grep -m1 "flags" /proc/cpuinfo || true
          fi

          echo "===== cpuid check (x86_64 only) ====="
          if command -v cpuid >/dev/null 2>&1; then
            cpuid | grep -E "SSE|AVX"
          else
            echo "cpuid tool not installed"
          fi

      #
      # Linux & MacOS (w/ Nix)
      # 
      - name: Install Nix
        if: matrix.use-flake == true
        uses: nixbuild/nix-quick-install-action@v33

      - name: Build & Test (Linux/MacOS)
        if: matrix.use-flake == true
        working-directory: ./clib
        run: |
          nix develop .#clib --command bash -c "
            make test
            make example
          "

      #
      # CPU Info (WIN) (w/o Nix)
      #
      - name: Info (CPU & SIMD) (WIN)
        if: matrix.use-flake == false && runner.os == 'Windows'
        shell: pwsh
        run: |
          Get-CimInstance Win32_Processor | Format-List Name, NumberOfCores, NumberOfLogicalProcessors, InstructionSet
       
      #
      # Win (x86_64) (w/o nix)
      # 
      - uses: msys2/setup-msys2@v2
        if: matrix.use-flake == false && matrix.arch == 'x86_64'
        with:
          update: true
          install: >-
            make
            nasm
            mingw-w64-x86_64-gcc

      - name: Build & Test (Win x86_64)
        if: matrix.use-flake == false && matrix.arch == 'x86_64'
        working-directory: ./clib
        shell: msys2 {0}
        run: |
          make test
          make example
          
      #
      # Win (AArch64) (w/o nix)
      # 
      - uses: msys2/setup-msys2@v2
        if: matrix.use-flake == false && matrix.arch == 'aarch64'
        with:
          update: true
          msystem: clangarm64
          install: >-
            make
            mingw-w64-clang-aarch64-clang

      - name: Build & Test (Win AArch64)
        if: matrix.use-flake == false && matrix.arch == 'aarch64'
        working-directory: ./clib
        shell: msys2 {0}
        run: |
          which clang
          clang --version
          make test
          make example
